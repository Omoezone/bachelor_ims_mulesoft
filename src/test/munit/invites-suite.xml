<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="invites-suite.xml" />
	<munit:test name="getUserInvites-test" doc:id="32e2a489-6180-4786-a25d-c0b5ab13b8c3" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="2982da78-37da-4525-b32d-46e1da9b34ff" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="ffb7f7f5-6b40-465b-9a4b-845ff777205b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getUserInvitestest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getUserInvitestest\mock_variable_.dwl')]" />
						<munit-tools:variable key="userEmail" value="#[output application/java --- readUrl('classpath://getUserInvitestest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Transform Message" doc:id="4cc2ef75-530b-41d3-b7d9-642c9f13fb83" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="03c9a6bb-deda-4286-aecc-4599ea48baa3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="869cf57d-d3d3-4d41-942d-45dbd3a66ad9" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import getUserInvitestest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="29d7ccaf-666e-4ab7-a12d-28c938d8633e" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import getUserInvitestest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="5fba0f10-27ef-468f-bf3d-a103082aefce" >
				<munit:payload value="#[readUrl('classpath://getUserInvitestest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getUserInvitestest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getUserInvitestest\set-event_variable_.dwl')]" />
					<munit:variable key="userEmail" value="#[output application/java --- readUrl('classpath://getUserInvitestest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getUserInvites" doc:id="b06abfce-8647-49a5-b69b-b423053e9edc" name="getUserInvites"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="8e6b1c38-83fb-4d16-8f93-b335fdd6e3f1" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getUserInvitestest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="327d0786-aea1-48a9-b5fa-395b259c8e2d" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="03c9a6bb-deda-4286-aecc-4599ea48baa3" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="sendInvite-test" doc:id="91dc75a6-a758-4604-a479-c8cd1659059b" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Stored procedure" doc:id="847b89cf-7bfd-41ff-b509-4cc4d0bef280" processor="db:stored-procedure">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="99eb3cdb-139a-4240-9f0a-e997ecea17cd" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://sendInvitetest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://sendInvitetest\mock_variable_.dwl')]" />
						<munit-tools:variable key="userId" value="#[output application/java --- readUrl('classpath://sendInvitetest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Transform Message" doc:id="60257b82-eeb0-4fd6-b262-830b6bc8411d" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="5bc142d4-9e07-4ea3-ad0c-d4e95bdbb96a" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="da824f61-96c6-43ce-b41d-ae093fcf9841" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import sendInvitetest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="c8e9c40b-e174-4c40-b081-ed9f8e85455e" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import sendInvitetest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="f7677127-811b-451b-be9a-b946f07da204" >
				<munit:payload value="#[output application/json --- readUrl('classpath://sendInvitetest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://sendInvitetest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://sendInvitetest\set-event_variable_.dwl')]" />
					<munit:variable key="userId" value="#[output application/java --- readUrl('classpath://sendInvitetest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to sendInvite" doc:id="e69c73f9-381d-4c26-92a1-1284162ab9d8" name="sendInvite"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c59f3580-9663-40e0-a6b5-ba1cb4da3ff0" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import sendInvitetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="6c738c2a-7e64-44e0-8079-5deb1f39720e" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="5bc142d4-9e07-4ea3-ad0c-d4e95bdbb96a" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="acceptInvite-test" doc:id="d840fe06-5965-415c-87ef-02cdb23695ec" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Stored procedure" doc:id="59c96ebe-27c0-4046-9c26-7590f6c89d9a" processor="db:stored-procedure">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="78bce038-62ff-4b15-91d1-bc6265dce39c" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://acceptInvitetest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://acceptInvitetest\mock_variable_.dwl')]" />
						<munit-tools:variable key="userId" value="#[output application/java --- readUrl('classpath://acceptInvitetest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Transform Message" doc:id="171d62f3-63c8-498d-a292-a0a2d4304170" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="9796dcd9-375d-42f1-9088-d0f2b8f28d83" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="9034f198-adb0-4264-a2fa-653ef95d9d1e" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import acceptInvitetest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="1ec89029-e96e-4273-a503-05cac602c5d0" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import acceptInvitetest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="52dd220c-a95d-49c8-b703-6250712c8d8f" >
				<munit:payload value="#[output application/json --- readUrl('classpath://acceptInvitetest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://acceptInvitetest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://acceptInvitetest\set-event_variable_.dwl')]" />
					<munit:variable key="userId" value="#[output application/java --- readUrl('classpath://acceptInvitetest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to acceptInvite" doc:id="2f070169-c6b9-4f77-9a87-d5c9898ff8eb" name="acceptInvite"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="e7a13323-413d-46e3-9f6c-652713364a00" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import acceptInvitetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="2c7ca6d1-dcd3-40d5-b2ac-af3ef857ab95" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="9796dcd9-375d-42f1-9088-d0f2b8f28d83" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>


</mule>
